
MS8607_write_read_verification.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00804000  00804000  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003591  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ea8  00000000  00000000  00003a51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000065d  00000000  00000000  000068f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00006f58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018eb  00000000  00000000  00006fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fe  00000000  00000000  000088c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008ac5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	ad 30       	cpi	r26, 0x0D	; 13
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
 114:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <MS8607_write>:
void MS8607_hum_data(uint8_t SLAVE_ADDRESS, uint8_t cmd);
void MS8607_hum_no_hold(uint8_t SLAVE_ADDRESS, uint8_t cmd, uint8_t high_data, uint8_t low_data, uint8_t checksum);

/********************Function Code********************/
void MS8607_write(uint8_t SLAVE_ADDRESS, uint8_t cmd){
	while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle
 11c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 120:	90 ff       	sbrs	r25, 0
 122:	fc cf       	rjmp	.-8      	; 0x11c <MS8607_write>
	TWI0.MADDR = (SLAVE_ADDRESS << 1);
 124:	88 0f       	add	r24, r24
 126:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 12a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 12e:	86 ff       	sbrs	r24, 6
 130:	fc cf       	rjmp	.-8      	; 0x12a <MS8607_write+0xe>
	TWI0.MDATA = cmd; //writing command
 132:	60 93 08 09 	sts	0x0908, r22	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 136:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 13a:	86 ff       	sbrs	r24, 6
 13c:	fc cf       	rjmp	.-8      	; 0x136 <MS8607_write+0x1a>
	TWI0.MCTRLB |= 0x03;//stop bit
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	f9 e0       	ldi	r31, 0x09	; 9
 142:	84 81       	ldd	r24, Z+4	; 0x04
 144:	83 60       	ori	r24, 0x03	; 3
 146:	84 83       	std	Z+4, r24	; 0x04
 148:	08 95       	ret

0000014a <MS8607_PT_read>:
}
uint16_t MS8607_PT_read(uint8_t SLAVE_ADDRESS, uint8_t high_byte, uint8_t low_byte ){
	
	uint16_t data; 
	
	while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle
 14a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 14e:	90 ff       	sbrs	r25, 0
 150:	fc cf       	rjmp	.-8      	; 0x14a <MS8607_PT_read>
	TWI0.MADDR = (SLAVE_ADDRESS << 1) | 0x01;
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	while(!(TWI_RIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 15e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 162:	88 23       	and	r24, r24
 164:	e4 f7       	brge	.-8      	; 0x15e <MS8607_PT_read+0x14>
	
	high_byte = TWI0.MDATA; //reading high byte
 166:	e0 e0       	ldi	r30, 0x00	; 0
 168:	f9 e0       	ldi	r31, 0x09	; 9
 16a:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB = 0x02; //acknowledge bit
 16c:	92 e0       	ldi	r25, 0x02	; 2
 16e:	94 83       	std	Z+4, r25	; 0x04
	
	while(!(TWI_RIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 170:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 174:	99 23       	and	r25, r25
 176:	e4 f7       	brge	.-8      	; 0x170 <MS8607_PT_read+0x26>
	low_byte = TWI0.MDATA; //reading low byte
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f9 e0       	ldi	r31, 0x09	; 9
 17c:	20 85       	ldd	r18, Z+8	; 0x08
	
	TWI0.MCTRLB = 0x07; //not acknowledge bit
 17e:	97 e0       	ldi	r25, 0x07	; 7
 180:	94 83       	std	Z+4, r25	; 0x04
	TWI0.MCTRLB |= 0x03; //stop bit
 182:	94 81       	ldd	r25, Z+4	; 0x04
 184:	93 60       	ori	r25, 0x03	; 3
 186:	94 83       	std	Z+4, r25	; 0x04
	
	data = ((high_byte << 8) | (low_byte & 0x80));
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	98 2f       	mov	r25, r24
 18c:	88 27       	eor	r24, r24
 18e:	20 78       	andi	r18, 0x80	; 128
	
	return data;
}
 190:	82 2b       	or	r24, r18
 192:	08 95       	ret

00000194 <MS8607_PT_read_convert>:
void MS8607_PT_read_convert(uint8_t SLAVE_ADDRESS, uint8_t high_byte, uint8_t mid_byte, uint8_t low_byte){
		
	while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle
 194:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 198:	90 ff       	sbrs	r25, 0
 19a:	fc cf       	rjmp	.-8      	; 0x194 <MS8607_PT_read_convert>
	TWI0.MADDR = (SLAVE_ADDRESS << 1) | 0x01; //read mode
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	81 60       	ori	r24, 0x01	; 1
 1a4:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	while(!(TWI_RIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 1a8:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1ac:	88 23       	and	r24, r24
 1ae:	e4 f7       	brge	.-8      	; 0x1a8 <MS8607_PT_read_convert+0x14>
	high_byte = TWI0.MDATA; //reading high byte
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f9 e0       	ldi	r31, 0x09	; 9
 1b4:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB = 0x02; //acknowledge bit
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	84 83       	std	Z+4, r24	; 0x04
	
	while(!(TWI_RIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 1ba:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1be:	88 23       	and	r24, r24
 1c0:	e4 f7       	brge	.-8      	; 0x1ba <MS8607_PT_read_convert+0x26>
	mid_byte = TWI0.MDATA; //reading mid byte
 1c2:	e0 e0       	ldi	r30, 0x00	; 0
 1c4:	f9 e0       	ldi	r31, 0x09	; 9
 1c6:	80 85       	ldd	r24, Z+8	; 0x08
	TWI0.MCTRLB = 0x02; //acknowledge bit
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	84 83       	std	Z+4, r24	; 0x04
	
	while(!(TWI_RIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 1cc:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1d0:	88 23       	and	r24, r24
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <MS8607_PT_read_convert+0x38>
	low_byte = TWI0.MDATA; //reading low byte
 1d4:	e0 e0       	ldi	r30, 0x00	; 0
 1d6:	f9 e0       	ldi	r31, 0x09	; 9
 1d8:	80 85       	ldd	r24, Z+8	; 0x08
	
	//while((TWI_RIF_bm & TWI0.MSTATUS)); //waiting for nack [might not need this]
	TWI0.MCTRLB = 0x07; //not acknowledge bit
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	84 83       	std	Z+4, r24	; 0x04
	TWI0.MCTRLB |= 0x03; //stop bit
 1de:	84 81       	ldd	r24, Z+4	; 0x04
 1e0:	83 60       	ori	r24, 0x03	; 3
 1e2:	84 83       	std	Z+4, r24	; 0x04
 1e4:	08 95       	ret

000001e6 <MS8607_init>:
	
	//TWI0.MCTRLB = 0x07; //not acknowledge bit
}
void MS8607_init(){
	PORTA_DIR |= PIN3_bm | PIN2_bm;
 1e6:	e0 e0       	ldi	r30, 0x00	; 0
 1e8:	f4 e0       	ldi	r31, 0x04	; 4
 1ea:	80 81       	ld	r24, Z
 1ec:	8c 60       	ori	r24, 0x0C	; 12
 1ee:	80 83       	st	Z, r24
	TWI0.MBAUD = 0x00;//setting up the baud rate
 1f0:	e0 e0       	ldi	r30, 0x00	; 0
 1f2:	f9 e0       	ldi	r31, 0x09	; 9
 1f4:	16 82       	std	Z+6, r1	; 0x06
	TWI0.MCTRLA = TWI_ENABLE_bm; //enable TWI
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	83 83       	std	Z+3, r24	; 0x03
	TWI0.DBGCTRL = 0x01; 
 1fa:	82 83       	std	Z+2, r24	; 0x02
	TWI0.MSTATUS = TWI_BUSSTATE_IDLE_gc; //make TWI bus idle
 1fc:	85 83       	std	Z+5, r24	; 0x05
 1fe:	08 95       	ret

00000200 <MS8607_hum_data>:
}
void MS8607_hum_data(uint8_t SLAVE_ADDRESS, uint8_t cmd){
	//write sequence
	uint8_t user_data; 
	
	while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle
 200:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 204:	90 ff       	sbrs	r25, 0
 206:	fc cf       	rjmp	.-8      	; 0x200 <MS8607_hum_data>
	TWI0.MADDR = (SLAVE_ADDRESS << 1);
 208:	28 2f       	mov	r18, r24
 20a:	22 0f       	add	r18, r18
 20c:	20 93 07 09 	sts	0x0907, r18	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 210:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 214:	96 ff       	sbrs	r25, 6
 216:	fc cf       	rjmp	.-8      	; 0x210 <MS8607_hum_data+0x10>
	TWI0.MDATA = cmd; //writing command
 218:	60 93 08 09 	sts	0x0908, r22	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 21c:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 220:	96 ff       	sbrs	r25, 6
 222:	fc cf       	rjmp	.-8      	; 0x21c <MS8607_hum_data+0x1c>
	
	TWI0.MCTRLB |= TWI_MCMD_REPSTART_gc; //issue repeated start
 224:	e0 e0       	ldi	r30, 0x00	; 0
 226:	f9 e0       	ldi	r31, 0x09	; 9
 228:	94 81       	ldd	r25, Z+4	; 0x04
 22a:	91 60       	ori	r25, 0x01	; 1
 22c:	94 83       	std	Z+4, r25	; 0x04
	
	//read sequence
	//while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle (do I need this?)
	TWI0.MADDR = (SLAVE_ADDRESS << 1) | 0x01; //read mode
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	81 60       	ori	r24, 0x01	; 1
 236:	87 83       	std	Z+7, r24	; 0x07
	
	while(!(TWI_RIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 238:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 23c:	88 23       	and	r24, r24
 23e:	e4 f7       	brge	.-8      	; 0x238 <MS8607_hum_data+0x38>
	
	user_data = TWI0.MDATA; //reading user data
 240:	e0 e0       	ldi	r30, 0x00	; 0
 242:	f9 e0       	ldi	r31, 0x09	; 9
 244:	90 85       	ldd	r25, Z+8	; 0x08
	//wait for nack??
	TWI0.MCTRLB |= TWI_MCMD_REPSTART_gc; //issue repeated start
 246:	84 81       	ldd	r24, Z+4	; 0x04
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	84 83       	std	Z+4, r24	; 0x04
	
	//write sequence
	//while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle (do I need this again)
	TWI0.MADDR = (SLAVE_ADDRESS << 1); //write mode
 24c:	27 83       	std	Z+7, r18	; 0x07
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 24e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 252:	86 ff       	sbrs	r24, 6
 254:	fc cf       	rjmp	.-8      	; 0x24e <MS8607_hum_data+0x4e>
	TWI0.MDATA = cmd; //writing command
 256:	60 93 08 09 	sts	0x0908, r22	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 25a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 25e:	86 ff       	sbrs	r24, 6
 260:	fc cf       	rjmp	.-8      	; 0x25a <MS8607_hum_data+0x5a>
	TWI0.MDATA = user_data;
 262:	90 93 08 09 	sts	0x0908, r25	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 266:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 26a:	86 ff       	sbrs	r24, 6
 26c:	fc cf       	rjmp	.-8      	; 0x266 <MS8607_hum_data+0x66>
	TWI0.MCTRLB |= 0x03;//stop bit
 26e:	e0 e0       	ldi	r30, 0x00	; 0
 270:	f9 e0       	ldi	r31, 0x09	; 9
 272:	84 81       	ldd	r24, Z+4	; 0x04
 274:	83 60       	ori	r24, 0x03	; 3
 276:	84 83       	std	Z+4, r24	; 0x04
 278:	08 95       	ret

0000027a <MS8607_hum_no_hold>:
}
void MS8607_hum_no_hold(uint8_t SLAVE_ADDRESS, uint8_t cmd, uint8_t high_data, uint8_t low_data, uint8_t checksum){
	uint32_t data;
	
	//write sequence
	while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle
 27a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 27e:	90 ff       	sbrs	r25, 0
 280:	fc cf       	rjmp	.-8      	; 0x27a <MS8607_hum_no_hold>
	TWI0.MADDR = (SLAVE_ADDRESS << 1);
 282:	98 2f       	mov	r25, r24
 284:	99 0f       	add	r25, r25
 286:	90 93 07 09 	sts	0x0907, r25	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 28a:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 28e:	96 ff       	sbrs	r25, 6
 290:	fc cf       	rjmp	.-8      	; 0x28a <MS8607_hum_no_hold+0x10>
	TWI0.MDATA = cmd; //writing command
 292:	60 93 08 09 	sts	0x0908, r22	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	while(!(TWI0.MSTATUS & TWI_WIF_bm)); //waiting to be able to write byte
 296:	90 91 05 09 	lds	r25, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 29a:	96 ff       	sbrs	r25, 6
 29c:	fc cf       	rjmp	.-8      	; 0x296 <MS8607_hum_no_hold+0x1c>
	TWI0.MCTRLB |= TWI_MCMD_REPSTART_gc; //issue repeated start
 29e:	e0 e0       	ldi	r30, 0x00	; 0
 2a0:	f9 e0       	ldi	r31, 0x09	; 9
 2a2:	94 81       	ldd	r25, Z+4	; 0x04
 2a4:	91 60       	ori	r25, 0x01	; 1
 2a6:	94 83       	std	Z+4, r25	; 0x04
	//read sequence
	//while(!(TWI_BUSSTATE_IDLE_gc & TWI0.MSTATUS)); //waiting for idle (do I need this again?)
	TWI0.MADDR = (SLAVE_ADDRESS << 1) | 0x01; //read mode
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	87 83       	std	Z+7, r24	; 0x07
	
	while(!(TWI_WIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 2b2:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 2b6:	86 ff       	sbrs	r24, 6
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <MS8607_hum_no_hold+0x38>
	
	high_data = TWI0.MDATA; //reading high byte
 2ba:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	//TWI0.MCTRLB = 0x02; //acknowledge bit
	
	while(!(TWI_WIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 2be:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 2c2:	86 ff       	sbrs	r24, 6
 2c4:	fc cf       	rjmp	.-8      	; 0x2be <MS8607_hum_no_hold+0x44>
	low_data = TWI0.MDATA; //reading low byte
 2c6:	80 91 08 09 	lds	r24, 0x0908	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
	
	while(!(TWI_WIF_bm & TWI0.MSTATUS)); //waiting for data to be received
 2ca:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 2ce:	86 ff       	sbrs	r24, 6
 2d0:	fc cf       	rjmp	.-8      	; 0x2ca <MS8607_hum_no_hold+0x50>
	checksum = TWI0.MDATA; //getting the checksum
 2d2:	e0 e0       	ldi	r30, 0x00	; 0
 2d4:	f9 e0       	ldi	r31, 0x09	; 9
 2d6:	80 85       	ldd	r24, Z+8	; 0x08
	//need to wait for nack??
	//TWI0.MCTRLB = 0x07; //not acknowledge bit
	TWI0.MCTRLB |= 0x03; //stop bit
 2d8:	84 81       	ldd	r24, Z+4	; 0x04
 2da:	83 60       	ori	r24, 0x03	; 3
 2dc:	84 83       	std	Z+4, r24	; 0x04
 2de:	08 95       	ret

000002e0 <main>:
#define HUM_ADDRESS 0x40

int main(void)
{
	
	MS8607_init(); //initialize TWI0 for MS8607
 2e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <MS8607_init>
	
	MS8607_write(PT_ADDRESS, 0x1E); //resetting for PT
 2e4:	6e e1       	ldi	r22, 0x1E	; 30
 2e6:	86 e7       	ldi	r24, 0x76	; 118
 2e8:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
	MS8607_write(HUM_ADDRESS, 0xFE); //resetting for hum
 2ec:	6e ef       	ldi	r22, 0xFE	; 254
 2ee:	80 e4       	ldi	r24, 0x40	; 64
 2f0:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
	
    while (1) 
    {
		//read PROM for PT
		MS8607_write(PT_ADDRESS, 0xA6); //sending cmd for PROM read
 2f4:	66 ea       	ldi	r22, 0xA6	; 166
 2f6:	86 e7       	ldi	r24, 0x76	; 118
 2f8:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
		PROM_PT = MS8607_PT_read(PT_ADDRESS, high_byte, low_byte); //getting prom data for PT
 2fc:	40 91 03 40 	lds	r20, 0x4003	; 0x804003 <low_byte>
 300:	60 91 0c 40 	lds	r22, 0x400C	; 0x80400c <high_byte>
 304:	86 e7       	ldi	r24, 0x76	; 118
 306:	0e 94 a5 00 	call	0x14a	; 0x14a <MS8607_PT_read>
 30a:	80 93 0a 40 	sts	0x400A, r24	; 0x80400a <PROM_PT>
 30e:	90 93 0b 40 	sts	0x400B, r25	; 0x80400b <PROM_PT+0x1>
		
		//read Pressure conversion sequence
		MS8607_write(PT_ADDRESS, 0x48); //command for pressure conversion
 312:	68 e4       	ldi	r22, 0x48	; 72
 314:	86 e7       	ldi	r24, 0x76	; 118
 316:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31a:	8f e1       	ldi	r24, 0x1F	; 31
 31c:	9e e4       	ldi	r25, 0x4E	; 78
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	f1 f7       	brne	.-4      	; 0x31e <main+0x3e>
 322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x44>
 324:	00 00       	nop
		_delay_ms(20);
		MS8607_write(PT_ADDRESS, 0x00); //start read sequence
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	86 e7       	ldi	r24, 0x76	; 118
 32a:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
		MS8607_PT_read_convert(PT_ADDRESS, pressure_pre_conversion[2], pressure_pre_conversion[1], pressure_pre_conversion[0]);
 32e:	e4 e0       	ldi	r30, 0x04	; 4
 330:	f0 e4       	ldi	r31, 0x40	; 64
 332:	20 81       	ld	r18, Z
 334:	41 81       	ldd	r20, Z+1	; 0x01
 336:	62 81       	ldd	r22, Z+2	; 0x02
 338:	86 e7       	ldi	r24, 0x76	; 118
 33a:	0e 94 ca 00 	call	0x194	; 0x194 <MS8607_PT_read_convert>
		
		//read temp conversion sequence
		MS8607_write(PT_ADDRESS, 0x58); //command for temp conversion
 33e:	68 e5       	ldi	r22, 0x58	; 88
 340:	86 e7       	ldi	r24, 0x76	; 118
 342:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
 346:	8f e1       	ldi	r24, 0x1F	; 31
 348:	9e e4       	ldi	r25, 0x4E	; 78
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <main+0x6a>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x70>
 350:	00 00       	nop
		_delay_ms(20);
		MS8607_write(PT_ADDRESS, 0x00); //start read sequence
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	86 e7       	ldi	r24, 0x76	; 118
 356:	0e 94 8e 00 	call	0x11c	; 0x11c <MS8607_write>
		MS8607_PT_read_convert(PT_ADDRESS, temp_pre_conversion[2], temp_pre_conversion[1], temp_pre_conversion[0]);
 35a:	e0 e0       	ldi	r30, 0x00	; 0
 35c:	f0 e4       	ldi	r31, 0x40	; 64
 35e:	20 81       	ld	r18, Z
 360:	41 81       	ldd	r20, Z+1	; 0x01
 362:	62 81       	ldd	r22, Z+2	; 0x02
 364:	86 e7       	ldi	r24, 0x76	; 118
 366:	0e 94 ca 00 	call	0x194	; 0x194 <MS8607_PT_read_convert>
		
		//read hum conversion
		MS8607_hum_data(HUM_ADDRESS, 0xE7); //getting hum data
 36a:	67 ee       	ldi	r22, 0xE7	; 231
 36c:	80 e4       	ldi	r24, 0x40	; 64
 36e:	0e 94 00 01 	call	0x200	; 0x200 <MS8607_hum_data>
		
		//get data from hold or no hold master (which to use??)
		MS8607_hum_no_hold(HUM_ADDRESS, 0xF5, hum_pre_conversion[2], hum_pre_conversion[1], hum_pre_conversion[0]); 
 372:	e7 e0       	ldi	r30, 0x07	; 7
 374:	f0 e4       	ldi	r31, 0x40	; 64
 376:	00 81       	ld	r16, Z
 378:	21 81       	ldd	r18, Z+1	; 0x01
 37a:	42 81       	ldd	r20, Z+2	; 0x02
 37c:	65 ef       	ldi	r22, 0xF5	; 245
 37e:	80 e4       	ldi	r24, 0x40	; 64
 380:	0e 94 3d 01 	call	0x27a	; 0x27a <MS8607_hum_no_hold>
 384:	b7 cf       	rjmp	.-146    	; 0x2f4 <main+0x14>

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
